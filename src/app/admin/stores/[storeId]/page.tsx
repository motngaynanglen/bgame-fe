"use client";
import React, { useState, useEffect, use } from "react";
import {
  Card,
  Form,
  Input,
  Button,
  message,
  Row,
  Col,
  Typography,
  Divider,
  Descriptions,
  Switch,
  Spin,
  Tabs,
  Modal,
  Upload,
  UploadProps,
  UploadFile,
} from "antd";
import {
  ShopOutlined,
  EnvironmentOutlined,
  PhoneOutlined,
  MailOutlined,
  EditOutlined,
  SaveOutlined,
  CloseOutlined,
  DeleteOutlined,
  EyeOutlined,
  InboxOutlined,
} from "@ant-design/icons";
import { useParams } from "next/navigation";
import { useQuery } from "@tanstack/react-query";
import storeApiRequest from "@/src/apiRequests/stores";
import { useAppContext } from "@/src/app/app-provider";
import Dragger from "antd/es/upload/Dragger";
import { useImageUploader } from "@/src/hooks/useImageUploader";


const { Title, Text } = Typography;
const { TextArea } = Input;
const { TabPane } = Tabs;

const beforeUpload = (file: File) => {
  const isImage = file.type.startsWith("image/");
  const isLt20MB = file.size / 1024 / 1024 <= 20;
  if (!isImage) {
    message.error("Ch·ªâ cho ph√©p ·∫£nh!");
    return Upload.LIST_IGNORE;
  }
  if (!isLt20MB) {
    message.error("Dung l∆∞·ª£ng ·∫£nh ph·∫£i ‚â§ 20MB!");
    return Upload.LIST_IGNORE;
  }
  return true;
};
const uploadProps: UploadProps = {
  accept: "image/*",
  beforeUpload: beforeUpload,
  multiple: true,
  maxCount: 10,
  listType: "picture",
  showUploadList: {
    showPreviewIcon: true,
    showRemoveIcon: true,
  },
};

interface StoreData {
  id: string;
  storeName: string;
  code: string;
  address: string;
  hotline: string;
  latitude: string;
  longtitude: string;
  email: string;
  status: string;
  description?: string;
  openingHours?: string;
  createdAt?: string;
  updatedAt?: string;
}

interface responseModel {
  data: StoreData;
  message: string;
  statusCode: number;
  paging: null;
}

const StoreDetailPage = () => {
  const [form] = Form.useForm();
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [editing, setEditing] = useState(false);
  const [storeData, setStoreData] = useState<StoreData | null>(null);
  const [activeTab, setActiveTab] = useState("details");
  const { storeId } = useParams();
  const { user } = useAppContext();
  const [fileList, setFileList] = useState<UploadFile[]>([]);
  const { uploadImages, uploading } = useImageUploader();

  console.log("storeId from params:", storeId);

  // Fetch store data
  useEffect(() => {
    const fetchStoreData = async () => {
      // Ki·ªÉm tra ƒëi·ªÅu ki·ªán
      if (!storeId || !user?.token) {
        setLoading(false);
        return;
      }

      try {
        setLoading(true);
        console.log("üîÑ Fetching store data...");

        // G·ªçi API tr·ª±c ti·∫øp v·ªõi fetch
        const response = await storeApiRequest.getDetail(storeId, user.token);

        if (response && response.data) {
          console.log("‚úÖ Data received:", response.data);
          setStoreData(response.data);
          form.setFieldsValue(response.data);
        } else {
          throw new Error("Invalid response format");
        }
      } catch (error) {
        console.error("‚ùå Fetch error:", error);
        message.error("Kh√¥ng th·ªÉ t·∫£i th√¥ng tin c·ª≠a h√†ng");
      } finally {
        setLoading(false);
      }
    };

    fetchStoreData();
  }, [storeId, user?.token, form]); // Dependency array
  console.log("storeData:", storeData);
  const handleSave = async (values: any) => {
    setSaving(true);
    try {
      const updateData = {
        ...values,
        id: storeId,
      };

      console.log("Update data:", updateData);
      await storeApiRequest.update(updateData, user?.token);

      message.success("C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!");
      setEditing(false);
      setStoreData((prev) => ({ ...prev, ...values }));
    } catch (error) {
      message.error("C·∫≠p nh·∫≠t th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.");
    } finally {
      setSaving(false);
    }
  };

  const handleCancelEdit = () => {
    form.setFieldsValue(storeData);
    setEditing(false);
  };

  const handleStatusChange = async (checked: boolean) => {
    try {
      await storeApiRequest.changeStatus(storeId, user?.token);

      setStoreData((prev) =>
        prev ? { ...prev, status: checked ? "ACTIVE" : "INACTIVE" } : null
      );

      message.success(
        checked ? "ƒê√£ k√≠ch ho·∫°t c·ª≠a h√†ng" : "ƒê√£ v√¥ hi·ªáu h√≥a c·ª≠a h√†ng"
      );
    } catch (error) {
      message.error("Thay ƒë·ªïi tr·∫°ng th√°i th·∫•t b·∫°i");
    }
  };

  // const handleStatusChange = async (checked: boolean) => {
  //   try {
  //     // await updateStoreStatusApi(storeId, checked);
  //     setStoreData(prev => prev ? { ...prev, isActive: checked } : null);
  //     message.success(checked ? 'ƒê√£ k√≠ch ho·∫°t c·ª≠a h√†ng' : 'ƒê√£ v√¥ hi·ªáu h√≥a c·ª≠a h√†ng');
  //   } catch (error) {
  //     message.error('Thay ƒë·ªïi tr·∫°ng th√°i th·∫•t b·∫°i');
  //   }
  // };

  const handleDeleteStore = () => {
    Modal.confirm({
      title: "X√°c nh·∫≠n x√≥a c·ª≠a h√†ng",
      content:
        "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a c·ª≠a h√†ng n√†y? H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c.",
      okText: "X√≥a",
      okType: "danger",
      cancelText: "H·ªßy",
      onOk: async () => {
        try {
          // await deleteStoreApi(storeId);
          message.success("ƒê√£ x√≥a c·ª≠a h√†ng th√†nh c√¥ng");
          // navigate back to stores list
        } catch (error) {
          message.error("X√≥a c·ª≠a h√†ng th·∫•t b·∫°i");
        }
      },
    });
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <Spin size="large" />
        <Text className="ml-2">ƒêang t·∫£i th√¥ng tin c·ª≠a h√†ng...</Text>
      </div>
    );
  }

  if (!storeData) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <Text type="secondary">Kh√¥ng t√¨m th·∫•y c·ª≠a h√†ng</Text>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 py-8 px-4">
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <div className="flex justify-between items-center mb-6">
          <div>
            <Title level={2} className="!mb-1">
              {storeData.storeName}
            </Title>
            <Text type="secondary">Qu·∫£n l√Ω th√¥ng tin c·ª≠a h√†ng</Text>
          </div>

          <div className="flex gap-2">
            <Switch
              checkedChildren="Ho·∫°t ƒë·ªông"
              unCheckedChildren="T·∫°m ƒë√≥ng"
              checked={storeData.status === "ACTIVE"}
              onChange={handleStatusChange}
              className="mr-2"
            />

            {/* <Switch
              checkedChildren="Ho·∫°t ƒë·ªông"
              unCheckedChildren="T·∫°m ƒë√≥ng"
              checked={storeData.isActive}
              onChange={handleStatusChange}
              className="mr-2"
            /> */}

            {!editing ? (
              <Button
                type="primary"
                icon={<EditOutlined />}
                onClick={() => setEditing(true)}
              >
                Ch·ªânh s·ª≠a
              </Button>
            ) : (
              <>
                <Button icon={<CloseOutlined />} onClick={handleCancelEdit}>
                  H·ªßy
                </Button>
                <Button
                  type="primary"
                  icon={<SaveOutlined />}
                  loading={saving}
                  onClick={() => form.submit()}
                >
                  L∆∞u thay ƒë·ªïi
                </Button>
              </>
            )}

            {/* <Button
              danger
              icon={<DeleteOutlined />}
              onClick={handleDeleteStore}
            >
              X√≥a
            </Button> */}
          </div>
        </div>

        <Tabs activeKey={activeTab} onChange={setActiveTab}>
          {/* Tab Chi ti·∫øt */}
          <TabPane tab=" Th√¥ng tin chi ti·∫øt" key="details">
            <Card className="rounded-2xl shadow-lg border-0">
              <Form
                form={form}
                layout="vertical"
                onFinish={handleSave}
                disabled={!editing}
              >
                <Row gutter={[24, 0]}>
                  <Col xs={24} lg={12}>
                    {/* Store Basic Info */}
                    <Divider orientation="left">Th√¥ng tin c∆° b·∫£n</Divider>

                    <Form.Item
                      name="storeName"
                      label="T√™n c·ª≠a h√†ng"
                      rules={[
                        {
                          required: true,
                          message: "Vui l√≤ng nh·∫≠p t√™n c·ª≠a h√†ng",
                        },
                      ]}
                    >
                      <Input prefix={<ShopOutlined />} size="large" />
                    </Form.Item>

                    <Form.Item
                      name="email"
                      label="Email"
                      rules={[
                        { required: true, message: "Vui l√≤ng nh·∫≠p email" },
                        { type: "email", message: "Email kh√¥ng h·ª£p l·ªá" },
                      ]}
                    >
                      <Input prefix={<MailOutlined />} size="large" />
                    </Form.Item>

                    <Form.Item
                      name="hotline"
                      label="S·ªë ƒëi·ªán tho·∫°i"
                      rules={[
                        {
                          required: true,
                          message: "Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i",
                        },
                      ]}
                    >
                      <Input prefix={<PhoneOutlined />} size="large" />
                    </Form.Item>

                    <Form.Item name="openingHours" label="Gi·ªù m·ªü c·ª≠a">
                      <Input size="large" />
                    </Form.Item>
                  </Col>

                  <Col xs={24} lg={12}>
                    {/* Location Info */}
                    <Divider orientation="left">ƒê·ªãa ch·ªâ v√† t·ªça ƒë·ªô</Divider>

                    <Form.Item
                      name="address"
                      label="ƒê·ªãa ch·ªâ"
                      rules={[
                        { required: true, message: "Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ" },
                      ]}
                    >
                      <TextArea rows={3} size="large" />
                    </Form.Item>

                    <Row gutter={[12, 0]}>
                      <Col xs={12}>
                        <Form.Item
                          name="latitude"
                          label="Vƒ© ƒë·ªô"
                          rules={[
                            { required: true, message: "Vui l√≤ng nh·∫≠p vƒ© ƒë·ªô" },
                          ]}
                        >
                          <Input size="large" />
                        </Form.Item>
                      </Col>
                      <Col xs={12}>
                        <Form.Item
                          name="longtitude"
                          label="Kinh ƒë·ªô"
                          rules={[
                            {
                              required: true,
                              message: "Vui l√≤ng nh·∫≠p kinh ƒë·ªô",
                            },
                          ]}
                        >
                          <Input size="large" />
                        </Form.Item>
                      </Col>
                    </Row>

                    <Form.Item name="description" label="M√¥ t·∫£ c·ª≠a h√†ng">
                      <TextArea rows={4} size="large" />
                    </Form.Item>
                  </Col>
                </Row>
                {/* --- H√åNH ·∫¢NH --- */}
                <Col span={24}>
                  <Card size="small" title="H√¨nh ·∫£nh C·ªßa H√†ng">
                    <Form.Item name="image" label="H√¨nh ·∫£nh">
                      <Dragger
                        {...uploadProps}
                        fileList={fileList}
                        onChange={(info) => setFileList(info.fileList)}
                        disabled={uploading}
                      >
                        <p className="ant-upload-drag-icon">
                          <InboxOutlined />
                        </p>
                        <p className="ant-upload-text">
                          K√©o v√† th·∫£ ho·∫∑c ch·ªçn ·∫£nh
                        </p>
                        <p className="ant-upload-hint">
                          T·ªëi ƒëa 10 ·∫£nh, m·ªói ·∫£nh ‚â§ 20MB
                        </p>
                      </Dragger>
                    </Form.Item>
                  </Card>
                </Col>
              </Form>
            </Card>
          </TabPane>

          {/* Tab Xem tr∆∞·ªõc */}
          <TabPane tab=" Xem tr∆∞·ªõc" key="preview">
            <Card className="rounded-2xl shadow-lg border-0">
              <Descriptions column={1} bordered>
                <Descriptions.Item label="T√™n c·ª≠a h√†ng">
                  {storeData.storeName}
                </Descriptions.Item>
                <Descriptions.Item label="Email">
                  {storeData.email}
                </Descriptions.Item>
                <Descriptions.Item label="S·ªë ƒëi·ªán tho·∫°i">
                  {storeData.hotline}
                </Descriptions.Item>
                <Descriptions.Item label="ƒê·ªãa ch·ªâ">
                  {storeData.address}
                </Descriptions.Item>
                <Descriptions.Item label="T·ªça ƒë·ªô">
                  {storeData.latitude}, {storeData.longtitude}
                </Descriptions.Item>
                <Descriptions.Item label="Gi·ªù m·ªü c·ª≠a">
                  {storeData.openingHours || "Ch∆∞a c·∫≠p nh·∫≠t"}
                </Descriptions.Item>
                <Descriptions.Item label="M√¥ t·∫£">
                  {storeData.description || "Ch∆∞a c√≥ m√¥ t·∫£"}
                </Descriptions.Item>
                <Descriptions.Item label="Tr·∫°ng th√°i">
                  <span
                    className={
                      storeData.status === "ACTIVE"
                        ? "text-green-600"
                        : "text-red-600"
                    }
                  >
                    {storeData.status === "ACTIVE"
                      ? "ƒêang ho·∫°t ƒë·ªông"
                      : "T·∫°m ƒë√≥ng"}
                  </span>
                </Descriptions.Item>
                <Descriptions.Item label="Ng√†y t·∫°o">
                  {storeData.createdAt}
                </Descriptions.Item>
                <Descriptions.Item label="C·∫≠p nh·∫≠t cu·ªëi">
                  {storeData.updatedAt}
                </Descriptions.Item>
              </Descriptions>
            </Card>
          </TabPane>
        </Tabs>

        {/* Map Preview */}
        <Card className="mt-6 rounded-2xl shadow-lg border-0">
          <Title level={4} className="!mb-4">
            <EnvironmentOutlined className="mr-2" />
            V·ªã tr√≠ tr√™n b·∫£n ƒë·ªì
          </Title>
          <div className="h-64 bg-gray-200 rounded-lg flex items-center justify-center">
            <Text type="secondary">
              <EyeOutlined className="mr-2" />
              B·∫£n ƒë·ªì s·∫Ω hi·ªÉn th·ªã t·∫°i ƒë√¢y ({storeData.latitude},{" "}
              {storeData.longtitude})
            </Text>
          </div>
        </Card>
      </div>
    </div>
  );
};

export default StoreDetailPage;
